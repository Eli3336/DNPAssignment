@page "/CreatePost"
@using Domain.Models
@using Domain.DTOs
@using BlazorApp.Services.ClientInterfaces
@inject IUserService userService
@inject IPostService postService
@inject NavigationManager navMgr
@inject AuthenticationStateProvider accessor
@attribute [Authorize]

<div class="card">
    <h3>Create Post</h3>
    <div class="form-group field">
        <label>Title:</label>
        <input type="text" @bind="postTitle"/>
    </div>
    <div class="form-group field">
        <textarea class="form-control" rows="5" id="comment" @bind="body"></textarea>
        
    </div>
    
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
        <div class="button-row">
                 <button @onclick="Create" class="acceptbtn">Create</button>
             </div>
</div>

@code {
    private string? selectedUserName;
    private string postTitle = "";
    private string body = "";

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
           selectedUserName = accessor.GetAuthenticationStateAsync().Result.User.Identity.Name;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if(string.IsNullOrEmpty(body))
        {
            msg = "Body cannot be empty!";
            return;
        }
        try
            {
                PostCreationDto dto = new(selectedUserName, postTitle, body);
                await postService.CreateAsync(dto);
                navMgr.NavigateTo("/ViewPosts");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                msg = e.Message;
            }
    }
}